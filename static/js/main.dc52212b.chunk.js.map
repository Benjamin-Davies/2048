{"version":3,"sources":["util.ts","Game.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["coords","x","y","coordsDir","dir","Direction","Up","Right","Down","Left","colors","LOG2","Math","log","randomStartValue","floor","random","randomSquare","Game","props","touchListenersAdded","state","squares","keyAcc","gameover","score","document","addEventListener","e","key","altKey","metaKey","preventDefault","move","this","reset","className","onClick","ref","grid","addTouchEventlisteners","map","s","value","style","length","display","paddingTop","textAlign","startX","startY","endX","endY","ev","touch","touches","pageX","pageY","diffX","diffY","abs","s1","s2","setState","moved","forEach","col","row","i","square","c","hasOwnProperty","emptySquares","push","k","split","parseInt","sort","a","b","checkGameover","current","React","App","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","Error","onstatechange","controller","console","catch","error","render","getElementById","URL","process","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.dc52212b.chunk.js","sourcesContent":["import { Direction } from './Game';\n\n/**\n * Convert coordinates into a string for the key of a SquareMap\n */\nexport function coords(x: number, y: number) {\n  return `${x},${y}`;\n}\n\n/**\n * Convert coordinates into a string for the key of a SquareMap using a direction\n */\nexport function coordsDir(x: number, y: number, dir: Direction) {\n  switch (dir) {\n    case Direction.Up:\n      return coords(x, y);\n    case Direction.Right:\n      return coords(3 - y, x);\n    case Direction.Down:\n      return coords(x, 3 - y);\n    case Direction.Left:\n      return coords(y, x);\n    default:\n      return '';\n  }\n}\n\n/**\n * Convert a string into coordinates\n */\nexport function deconCoords(s: string) {\n  return s.split(',').map(x => parseInt(x, 10));\n}\n\nconst colors = [\n  'red',\n  'grey lighten-5',\n  'grey lighten-5',\n  'grey lighten-4',\n  'grey lighten-4',\n  'grey lighten-3',\n  'grey lighten-3',\n  'grey lighten-2',\n  'grey lighten-2',\n  'grey lighten-1',\n  'grey lighten-1',\n  'light-green lighten-2'\n];\nconst LOG2 = Math.log(2);\n\n/**\n * Get's the square's materialize-css color class\n * @param value Number to be displayed on the square\n */\nexport function getSquareColor(value: number) {\n  return colors[Math.log(value) / LOG2];\n}\n\n/**\n * Pick a random value for a square to start with\n */\nexport function randomStartValue() {\n  return 2 + 2 * Math.floor(2 * Math.random());\n}\n\n/**\n * Pick a random single coordinate for a square\n */\nexport function randomSquare() {\n  return Math.floor(4 * Math.random());\n}\n","import * as React from 'react';\nimport './Game.css';\nimport {\n  coords,\n  coordsDir,\n  deconCoords,\n  getSquareColor,\n  randomSquare,\n  randomStartValue\n} from './util';\n\n/**\n * One square\n */\ninterface Square {\n  key: number; // Used for animations (implemented in css)\n  value: number;\n  x: number;\n  y: number;\n}\n\n/**\n * One square without a position\n */\ninterface PositionlessSquare {\n  key: number;\n  value: number;\n}\n\n/**\n * Map of positions to position-less squares\n */\ninterface SquareMap {\n  [_: string]: PositionlessSquare;\n}\n\n/**\n * Direction of move\n */\nexport enum Direction {\n  Up,\n  Right,\n  Down,\n  Left\n}\n\n/**\n * State of game\n */\ninterface State {\n  squares: Square[];\n  keyAcc: number;\n  gameover: boolean;\n  score: number;\n}\n\n/**\n * Component for the main game area\n */\nexport default class Game extends React.Component<{}, State> {\n  private touchListenersAdded = false;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = { squares: [], keyAcc: 0, gameover: false, score: 0 };\n  }\n\n  public componentDidMount() {\n    document.addEventListener('keydown', e => {\n      if (this.state.gameover) {\n        return;\n      }\n\n      let dir: Direction;\n\n      switch (e.key) {\n        case 'ArrowUp':\n          dir = Direction.Up;\n          break;\n        case 'ArrowRight':\n          dir = Direction.Right;\n          break;\n        case 'ArrowDown':\n          dir = Direction.Down;\n          break;\n        case 'ArrowLeft':\n          dir = Direction.Left;\n          break;\n        default:\n          return;\n      }\n\n      if (!e.altKey && !e.metaKey) {\n        e.preventDefault();\n      }\n      this.move(dir);\n    });\n\n    this.reset();\n  }\n\n  public render() {\n    return (\n      <div className=\"container\">\n        <div className=\"GameMenu\">\n          <div className=\"text\">\n            <span className=\"left\">{this.state.score}</span>\n          </div>\n          <button className=\"btn\" onClick={() => this.reset()}>\n            Restart\n          </button>\n        </div>\n        <div\n          className=\"Grid grey lighten-3\"\n          ref={grid => {\n            if (grid) {\n              this.addTouchEventlisteners(grid);\n            }\n          }}\n        >\n          {this.state.squares.map(s => (\n            <div\n              className={'Square ' + getSquareColor(s.value)}\n              key={s.key}\n              style={{\n                '--num-length': ('' + s.value).length,\n                '--x': s.x,\n                '--y': s.y\n              } as any}\n            >\n              {s.value}\n            </div>\n          ))}\n          <div\n            className={'Gameover'}\n            style={{ display: this.state.gameover ? 'block' : 'none' }}\n          >\n            <div className=\"container\">\n              <div className=\"card\" style={{ paddingTop: 10 }}>\n                <div className=\"container\">\n                  <h3>Game Over!</h3>\n                  <p>Better luck next-time</p>\n                </div>\n                <p style={{ textAlign: 'right' }}>\n                  <button\n                    className=\"btn-flat blue-text\"\n                    onClick={() => this.reset()}\n                  >\n                    try again\n                  </button>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Add the event listeners required for touch interaction\n   * @param grid The grid element (obtained using ref prop)\n   */\n  private addTouchEventlisteners(grid: HTMLElement) {\n    if (this.touchListenersAdded) {\n      return;\n    }\n    this.touchListenersAdded = true;\n\n    let startX = 0;\n    let startY = 0;\n    let endX = 0;\n    let endY = 0;\n\n    grid.addEventListener('touchstart', ev => {\n      if (!this.state.gameover) {\n        ev.preventDefault();\n\n        const touch = ev.touches[0];\n        startX = touch.pageX;\n        startY = touch.pageY;\n      }\n    });\n\n    grid.addEventListener('touchmove', ev => {\n      if (!this.state.gameover) {\n        const touch = ev.touches[0];\n        endX = touch.pageX;\n        endY = touch.pageY;\n      }\n    });\n\n    grid.addEventListener('touchend', ev => {\n      if (!this.state.gameover) {\n        const diffX = endX - startX;\n        const diffY = endY - startY;\n\n        if (diffX * diffX + diffY * diffY > 100) {\n          if (Math.abs(diffX) > Math.abs(diffY)) {\n            if (diffX > 0) {\n              this.move(Direction.Right);\n            } else {\n              this.move(Direction.Left);\n            }\n          } else {\n            if (diffY > 0) {\n              this.move(Direction.Down);\n            } else {\n              this.move(Direction.Up);\n            }\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Reset the squares to a random starting state\n   */\n  private reset() {\n    const s1: Square = { key: 0, value: randomStartValue(), x: 0, y: 0 };\n    const s2: Square = { key: 1, value: randomStartValue(), x: 0, y: 0 };\n\n    while (s1.x === s2.x && s1.y === s2.y) {\n      s1.x = randomSquare();\n      s1.y = randomSquare();\n      s2.x = randomSquare();\n      s2.y = randomSquare();\n    }\n\n    this.setState({\n      gameover: false,\n      keyAcc: 1,\n      score: 0,\n      squares: [s1, s2]\n    });\n  }\n\n  /**\n   * Make a move\n   * @param dir Direction of the move\n   */\n  private move(dir: Direction) {\n    let keyAcc = this.state.keyAcc;\n    let score = this.state.score;\n    let moved = false;\n\n    const map: SquareMap = {};\n    this.state.squares.forEach(\n      ({ x, y, value, key }) => (map[coords(x, y)] = { value, key })\n    );\n\n    // Move squares\n    for (let col = 0; col < 4; col++) {\n      for (let row = 0; row < 4; row++) {\n        let i = row;\n        let square: PositionlessSquare | undefined;\n\n        // Find a square to go into that cell\n        for (; i < 4; i++) {\n          const c = coordsDir(col, i, dir);\n          if (map.hasOwnProperty(c)) {\n            square = map[c];\n            delete map[c];\n            if (i > row) {\n              moved = true;\n            }\n            i++;\n            break;\n          }\n        }\n\n        // Check if there are any more in the row\n        for (; i < 4; i++) {\n          const c = coordsDir(col, i, dir);\n          if (map.hasOwnProperty(c)) {\n            // If it is the same then merge\n            if (\n              typeof square !== 'undefined' &&\n              map[c].value === square.value\n            ) {\n              score += square.value * 2;\n              square = { key: square.key, value: square.value * 2 };\n              delete map[c];\n              moved = true;\n            }\n            break;\n          }\n        }\n\n        if (typeof square !== 'undefined') {\n          const c = coordsDir(col, row, dir);\n          map[c] = square;\n        }\n      }\n    }\n\n    if (!moved) {\n      return;\n    }\n\n    // Find all the empty squares\n    const emptySquares = [];\n    for (let x = 0; x < 4; x++) {\n      for (let y = 0; y < 4; y++) {\n        if (!map.hasOwnProperty(coords(x, y))) {\n          emptySquares.push({ x, y });\n        }\n      }\n    }\n\n    // Generate new square if there is room\n    if (emptySquares.length > 0) {\n      keyAcc++;\n      const key = keyAcc;\n      const value = randomStartValue();\n      const { x, y } = emptySquares[\n        Math.floor(emptySquares.length * Math.random())\n      ];\n\n      map[coords(x, y)] = { key, value };\n    }\n\n    const squares: Square[] = [];\n    for (const k in map) {\n      if (map.hasOwnProperty(k)) {\n        const { key, value } = map[k];\n        const [x, y] = deconCoords(k);\n\n        squares.push({ key, value, x, y });\n      }\n    }\n\n    squares.sort((a, b) => a.key - b.key);\n\n    this.setState({ keyAcc, score, squares });\n\n    this.checkGameover(map);\n  }\n\n  /**\n   * Checks if there are any moves left\n   * If there are none then setState gameover to true\n   * @param map A map of the current game-board\n   */\n  private checkGameover(map: SquareMap) {\n    if (this.state.gameover) {\n      return;\n    }\n\n    for (let x = 0; x < 4; x++) {\n      for (let y = 0; y < 4; y++) {\n        if (!map.hasOwnProperty(coords(x, y))) {\n          return;\n        }\n      }\n    }\n\n    for (let x = 0; x < 3; x++) {\n      for (let y = 0; y < 3; y++) {\n        const current = map[coords(x, y)];\n\n        if (map[coords(x + 1, y)].value === current.value) {\n          return;\n        }\n        if (map[coords(x, y + 1)].value === current.value) {\n          return;\n        }\n      }\n    }\n\n    this.setState({ gameover: true });\n  }\n}\n","import * as React from 'react';\n\nimport Game from './Game';\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <div>\n        <header className=\"center container\">\n          <h1>2048</h1>\n        </header>\n        <main className=\"center\">\n          <Game />\n        </main>\n        <section className=\"container\">\n          <p>\n            Swipe or use the arrow keys to move the tiles around the 4&times;4\n            grid. Combine 2 tiles of the same type to form their sum. The goal\n            is to either get the highest score, or to form the 2048 tile.\n          </p>\n          <p>\n            I made this game clone a while ago now. I have re-visited it to fix a couple of bugs but overall it is the same as it was in 2017. I would appreciate it if you checked out some of my{' '}\n            <a href=\"/\">more recent projects.</a>\n          </p>\n        </section>\n        <footer className=\"page-footer blue\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col l6 s12\">\n                <h5 className=\"white-text\">Credits</h5>\n                <p className=\"grey-text text-lighten-4\">\n                  Made using React and Materialize.\n                </p>\n              </div>\n              <div className=\"col l4 offset-l2 s12\">\n                <h5 className=\"white-text\">Links</h5>\n                <ul>\n                  <li>\n                    <a\n                      className=\"grey-text text-lighten-3\"\n                      href=\"https://benjamin-davies.github.io/\"\n                    >\n                      My Site\n                    </a>\n                  </li>\n                  <li>\n                    <a\n                      className=\"grey-text text-lighten-3\"\n                      href=\"https://github.com/benjamin-davies/\"\n                    >\n                      My GitHub profile\n                    </a>\n                  </li>\n                  <li>\n                    <a\n                      className=\"grey-text text-lighten-3\"\n                      href=\"https://reactjs.org/\"\n                    >\n                      React\n                    </a>\n                  </li>\n                  <li>\n                    <a\n                      className=\"grey-text text-lighten-3\"\n                      href=\"http://materializecss.com/\"\n                    >\n                      Materialize\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          <div className=\"footer-copyright\">\n            <div className=\"container\">\n              © 2017 Benjamin Davies\n              <a\n                className=\"grey-text text-lighten-4 right\"\n                href=\"https://benjamin-davies.github.io/\"\n              >\n                My Website\n              </a>\n            </div>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator &&\n    typeof process.env.PUBLIC_URL === 'string'\n  ) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          throw new Error('Idk what went wrong');\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        (response.headers.get('content-type') || '').indexOf('javascript') ===\n          -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'materialize-css/dist/css/materialize.min.css';\nimport * as React from 'react';\nimport { render } from 'react-dom';\n\nimport App from './App';\n\nimport registerServiceWorker from './registerServiceWorker';\n\nrender(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}